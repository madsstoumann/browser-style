#!/bin/bash

# Content Security Policy (CSP) Analysis Script
# Usage: ./checkCSP domain.com

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

URL="$1"

if [ -z "$URL" ]; then
    echo -e "${RED}Usage: checkCSP domain.com${NC}"
    exit 1
fi

# Add https:// if no protocol specified
if [[ ! "$URL" =~ ^https?:// ]]; then
    URL="https://$URL"
fi

# Test connectivity with fallbacks
test_url() {
    if curl -s --head --max-time 10 "$1" > /dev/null 2>&1; then
        echo "$1"
        return 0
    fi
    return 1
}

echo -e "${BOLD}${BLUE}üõ°Ô∏è Content Security Policy (CSP) Analysis${NC}"
echo -e "${CYAN}======================================================${NC}"

# Test connectivity
FINAL_URL=""
if FINAL_URL=$(test_url "$URL"); then
    echo -e "${GREEN}‚úÖ Analyzing: $FINAL_URL${NC}"
elif [[ ! "$URL" =~ ^https://www\. ]] && FINAL_URL=$(test_url "https://www.${URL#https://}"); then
    echo -e "${GREEN}‚úÖ Analyzing: $FINAL_URL ${ORANGE}(with www prefix)${NC}"
else
    echo -e "${RED}‚ùå Error: Cannot reach $URL or www variant${NC}"
    exit 1
fi

echo ""

# Get headers
HEADERS=$(curl -s -L -I "$FINAL_URL")
FINAL_HEADERS=$(echo "$HEADERS" | awk 'BEGIN{RS=""} END{print}')

# Get page content to check for meta CSP
PAGE_CONTENT=$(curl -s -L "$FINAL_URL")

# Extract CSP from headers
HEADER_CSP=$(echo "$FINAL_HEADERS" | grep -i "content-security-policy:" | cut -d' ' -f2- | tr -d '\r\n')

# Extract CSP from meta tags
META_CSP=$(echo "$PAGE_CONTENT" | grep -i '<meta[^>]*http-equiv[^>]*content-security-policy' | sed -n 's/.*content=["'\'']\([^"'\'']*\)["'\''].*/\1/p')

echo -e "${BOLD}üîç CSP Sources Found:${NC}"
echo ""

CSP_FOUND=false

if [ -n "$HEADER_CSP" ]; then
    echo -e "${GREEN}‚úÖ CSP Header Found:${NC}"
    echo -e "${CYAN}$HEADER_CSP${NC}"
    echo ""
    CSP_FOUND=true
    PRIMARY_CSP="$HEADER_CSP"
fi

if [ -n "$META_CSP" ]; then
    echo -e "${GREEN}‚úÖ CSP Meta Tag Found:${NC}"
    echo -e "${CYAN}$META_CSP${NC}"
    echo ""
    CSP_FOUND=true
    if [ -z "$PRIMARY_CSP" ]; then
        PRIMARY_CSP="$META_CSP"
    fi
fi

if [ "$CSP_FOUND" = false ]; then
    echo -e "${RED}‚ùå No Content Security Policy found${NC}"
    echo -e "${RED}   Site is vulnerable to XSS and injection attacks${NC}"
    exit 1
fi

# Analyze CSP for security issues
echo -e "${BOLD}‚ö†Ô∏è Security Analysis:${NC}"
echo -e "${CYAN}======================================================${NC}"

WARNINGS=0
ERRORS=0
ISSUES_FOUND=false

# Check for dangerous directives
echo -e "${BOLD}üö® Critical Security Issues:${NC}"
echo ""

# Check for 'unsafe-inline' in script-src
if echo "$PRIMARY_CSP" | grep -q "script-src[^;]*'unsafe-inline'"; then
    echo -e "${RED}‚ùå CRITICAL: 'unsafe-inline' found in script-src directive${NC}"
    echo -e "${RED}   This allows inline JavaScript execution and defeats CSP protection${NC}"
    ERRORS=$((ERRORS + 1))
    ISSUES_FOUND=true
fi

# Check for 'unsafe-eval' in script-src
if echo "$PRIMARY_CSP" | grep -q "script-src[^;]*'unsafe-eval'"; then
    echo -e "${RED}‚ùå CRITICAL: 'unsafe-eval' found in script-src directive${NC}"
    echo -e "${RED}   This allows eval() and similar dangerous functions${NC}"
    ERRORS=$((ERRORS + 1))
    ISSUES_FOUND=true
fi

# Check for wildcard (*) in script-src
if echo "$PRIMARY_CSP" | grep -q "script-src[^;]*\\*"; then
    echo -e "${RED}‚ùå CRITICAL: Wildcard (*) found in script-src directive${NC}"
    echo -e "${RED}   This allows scripts from any domain${NC}"
    ERRORS=$((ERRORS + 1))
    ISSUES_FOUND=true
fi

# Check for 'unsafe-inline' in style-src
if echo "$PRIMARY_CSP" | grep -q "style-src[^;]*'unsafe-inline'"; then
    echo -e "${ORANGE}‚ö†Ô∏è  WARNING: 'unsafe-inline' found in style-src directive${NC}"
    echo -e "${ORANGE}   Consider using nonces or hashes for inline styles${NC}"
    WARNINGS=$((WARNINGS + 1))
    ISSUES_FOUND=true
fi

# Check for missing directives
echo ""
echo -e "${BOLD}üìã Directive Analysis:${NC}"
echo ""

MISSING_DIRECTIVES=()

# Check for important directives
if ! echo "$PRIMARY_CSP" | grep -q "default-src"; then
    MISSING_DIRECTIVES+=("default-src")
fi

if ! echo "$PRIMARY_CSP" | grep -q "script-src"; then
    MISSING_DIRECTIVES+=("script-src")
fi

if ! echo "$PRIMARY_CSP" | grep -q "object-src"; then
    MISSING_DIRECTIVES+=("object-src")
fi

if ! echo "$PRIMARY_CSP" | grep -q "base-uri"; then
    MISSING_DIRECTIVES+=("base-uri")
fi

if [ ${#MISSING_DIRECTIVES[@]} -gt 0 ]; then
    for directive in "${MISSING_DIRECTIVES[@]}"; do
        echo -e "${ORANGE}‚ö†Ô∏è  Missing important directive: $directive${NC}"
        WARNINGS=$((WARNINGS + 1))
        ISSUES_FOUND=true
    done
fi

# Check for good security practices
echo ""
echo -e "${BOLD}‚úÖ Security Strengths:${NC}"
echo ""

STRENGTHS=0

if echo "$PRIMARY_CSP" | grep -q "object-src[^;]*'none'"; then
    echo -e "${GREEN}‚úÖ object-src set to 'none' (prevents Flash/plugin injection)${NC}"
    STRENGTHS=$((STRENGTHS + 1))
fi

if echo "$PRIMARY_CSP" | grep -q "base-uri[^;]*'self'"; then
    echo -e "${GREEN}‚úÖ base-uri restricted to 'self' (prevents base tag injection)${NC}"
    STRENGTHS=$((STRENGTHS + 1))
fi

if echo "$PRIMARY_CSP" | grep -q "upgrade-insecure-requests"; then
    echo -e "${GREEN}‚úÖ upgrade-insecure-requests directive found${NC}"
    STRENGTHS=$((STRENGTHS + 1))
fi

if echo "$PRIMARY_CSP" | grep -q "frame-ancestors"; then
    echo -e "${GREEN}‚úÖ frame-ancestors directive found (clickjacking protection)${NC}"
    STRENGTHS=$((STRENGTHS + 1))
fi

if [ $STRENGTHS -eq 0 ]; then
    echo -e "${ORANGE}‚ö†Ô∏è  No additional security strengths detected${NC}"
fi

# CSP Grade Assessment
echo ""
echo -e "${BOLD}üìä CSP Security Assessment:${NC}"
echo -e "${CYAN}======================================================${NC}"

if [ $ERRORS -gt 0 ]; then
    echo -e "${RED}üö® CSP Grade: F (Fail)${NC}"
    echo -e "${RED}   Critical security issues found: $ERRORS${NC}"
    echo -e "${RED}   CSP provides minimal protection${NC}"
elif [ $WARNINGS -gt 2 ]; then
    echo -e "${ORANGE}‚ö†Ô∏è  CSP Grade: D (Poor)${NC}"
    echo -e "${ORANGE}   Multiple warnings found: $WARNINGS${NC}"
    echo -e "${ORANGE}   CSP needs significant improvements${NC}"
elif [ $WARNINGS -gt 0 ]; then
    echo -e "${ORANGE}‚ö†Ô∏è  CSP Grade: C (Fair)${NC}"
    echo -e "${ORANGE}   Some warnings found: $WARNINGS${NC}"
    echo -e "${ORANGE}   CSP could be strengthened${NC}"
elif [ $STRENGTHS -gt 2 ]; then
    echo -e "${GREEN}‚úÖ CSP Grade: A (Excellent)${NC}"
    echo -e "${GREEN}   Strong CSP implementation with $STRENGTHS security features${NC}"
else
    echo -e "${GREEN}‚úÖ CSP Grade: B (Good)${NC}"
    echo -e "${GREEN}   Solid CSP implementation, minor improvements possible${NC}"
fi

echo ""

# Recommendations
if [ "$ISSUES_FOUND" = true ]; then
    echo -e "${BOLD}üí° Recommendations:${NC}"
    echo ""

    if echo "$PRIMARY_CSP" | grep -q "'unsafe-inline'"; then
        echo -e "${ORANGE}‚Ä¢ Remove 'unsafe-inline' and use nonces or hashes instead${NC}"
        echo -e "  Example: script-src 'nonce-abc123' or 'sha256-xyz...'${NC}"
    fi

    if echo "$PRIMARY_CSP" | grep -q "'unsafe-eval'"; then
        echo -e "${ORANGE}‚Ä¢ Remove 'unsafe-eval' and avoid eval() functions${NC}"
    fi

    if [[ " ${MISSING_DIRECTIVES[@]} " =~ " object-src " ]]; then
        echo -e "${ORANGE}‚Ä¢ Add object-src 'none' to prevent plugin injection${NC}"
    fi

    if [[ " ${MISSING_DIRECTIVES[@]} " =~ " base-uri " ]]; then
        echo -e "${ORANGE}‚Ä¢ Add base-uri 'self' to prevent base tag injection${NC}"
    fi
fi

echo -e "${CYAN}======================================================${NC}"