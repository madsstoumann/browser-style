#!/bin/bash

# Open Graph Metadata Testing Script with Color Output
# Usage: ./checkOpenGraph domain.com

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

URL="$1"

if [ -z "$URL" ]; then
    echo -e "${RED}Usage: checkOpenGraph domain.com${NC}"
    exit 1
fi

# Add https:// if no protocol specified
if [[ ! "$URL" =~ ^https?:// ]]; then
    URL="https://$URL"
fi

# Test connectivity with fallbacks
test_url() {
    if curl -s --head --max-time 10 "$1" > /dev/null 2>&1; then
        echo "$1"
        return 0
    fi
    return 1
}

echo -e "${BOLD}${BLUE}üåê Open Graph Metadata Analysis${NC}"
echo -e "${CYAN}=================================================${NC}"

# Test connectivity
FINAL_URL=""
if FINAL_URL=$(test_url "$URL"); then
    echo -e "${GREEN}‚úÖ Connected to: $FINAL_URL${NC}"
elif [[ ! "$URL" =~ ^https://www\. ]] && FINAL_URL=$(test_url "https://www.${URL#https://}"); then
    echo -e "${GREEN}‚úÖ Connected to: $FINAL_URL ${ORANGE}(with www prefix)${NC}"
else
    echo -e "${RED}‚ùå Error: Cannot reach $URL or www variant${NC}"
    exit 1
fi

echo ""

# Fetch HTML content
echo -e "${BOLD}Extracting Open Graph Metadata...${NC}"
HTML_FILE=$(mktemp)
curl -s "$FINAL_URL" > "$HTML_FILE"

# Initialize counters
OG_TAG_COUNT=0
TWITTER_TAG_COUNT=0
REQUIRED_OG_COUNT=0
OPTIONAL_OG_COUNT=0

# Extract Open Graph tags
OG_TAGS=$(grep -o '<meta[^>]*property="og:[^"]*"[^>]*>' "$HTML_FILE" 2>/dev/null || echo "")
TWITTER_TAGS=$(grep -o '<meta[^>]*name="twitter:[^"]*"[^>]*>' "$HTML_FILE" 2>/dev/null || echo "")

if [ -n "$OG_TAGS" ]; then
    OG_TAG_COUNT=$(echo "$OG_TAGS" | wc -l | tr -d ' ')
fi

if [ -n "$TWITTER_TAGS" ]; then
    TWITTER_TAG_COUNT=$(echo "$TWITTER_TAGS" | wc -l | tr -d ' ')
fi

# Function to extract Open Graph property value
get_og_property() {
    local property="$1"
    grep -o "<meta[^>]*property=\"$property\"[^>]*content=\"[^\"]*\"" "$HTML_FILE" | \
    sed 's/.*content="\([^"]*\)".*/\1/' | head -1
}

# Function to extract Twitter Card property value
get_twitter_property() {
    local property="$1"
    grep -o "<meta[^>]*name=\"$property\"[^>]*content=\"[^\"]*\"" "$HTML_FILE" | \
    sed 's/.*content="\([^"]*\)".*/\1/' | head -1
}

# Check required Open Graph properties
OG_TITLE=$(get_og_property "og:title")
OG_TYPE=$(get_og_property "og:type")
OG_IMAGE=$(get_og_property "og:image")
OG_URL=$(get_og_property "og:url")
OG_DESCRIPTION=$(get_og_property "og:description")
OG_SITE_NAME=$(get_og_property "og:site_name")

# Check optional Open Graph properties
OG_LOCALE=$(get_og_property "og:locale")
OG_IMAGE_ALT=$(get_og_property "og:image:alt")
OG_IMAGE_WIDTH=$(get_og_property "og:image:width")
OG_IMAGE_HEIGHT=$(get_og_property "og:image:height")
OG_ARTICLE_AUTHOR=$(get_og_property "og:article:author")
OG_ARTICLE_PUBLISHED=$(get_og_property "og:article:published_time")

# Check Twitter Card properties
TWITTER_CARD=$(get_twitter_property "twitter:card")
TWITTER_SITE=$(get_twitter_property "twitter:site")
TWITTER_CREATOR=$(get_twitter_property "twitter:creator")
TWITTER_TITLE=$(get_twitter_property "twitter:title")
TWITTER_DESCRIPTION=$(get_twitter_property "twitter:description")
TWITTER_IMAGE=$(get_twitter_property "twitter:image")

# Count required properties
[ -n "$OG_TITLE" ] && ((REQUIRED_OG_COUNT++))
[ -n "$OG_TYPE" ] && ((REQUIRED_OG_COUNT++))
[ -n "$OG_IMAGE" ] && ((REQUIRED_OG_COUNT++))
[ -n "$OG_URL" ] && ((REQUIRED_OG_COUNT++))

# Count optional properties
[ -n "$OG_DESCRIPTION" ] && ((OPTIONAL_OG_COUNT++))
[ -n "$OG_SITE_NAME" ] && ((OPTIONAL_OG_COUNT++))
[ -n "$OG_LOCALE" ] && ((OPTIONAL_OG_COUNT++))
[ -n "$OG_IMAGE_ALT" ] && ((OPTIONAL_OG_COUNT++))

echo ""
echo -e "${BOLD}${PURPLE}üìä Open Graph Summary${NC}"
echo -e "${CYAN}========================${NC}"

TOTAL_SCORE=$(( (REQUIRED_OG_COUNT * 25) + (OPTIONAL_OG_COUNT * 5) ))
MAX_SCORE=120

if [ "$OG_TAG_COUNT" -gt 0 ]; then
    echo -e "${GREEN}‚úÖ Open Graph markup found: $OG_TAG_COUNT tags${NC}"
    echo -e "${CYAN}   Score: ${BOLD}$TOTAL_SCORE/$MAX_SCORE${NC} (${CYAN}Required: $REQUIRED_OG_COUNT/4, Optional: $OPTIONAL_OG_COUNT/8${NC})"
else
    echo -e "${RED}‚ùå No Open Graph markup detected${NC}"
fi

echo ""

# Required Properties Analysis
echo -e "${BOLD}üîß Required Open Graph Properties${NC}"
echo -e "${CYAN}===================================${NC}"

if [ -n "$OG_TITLE" ]; then
    echo -e "${GREEN}‚úÖ og:title${NC} - ${BOLD}\"$OG_TITLE\"${NC}"
else
    echo -e "${RED}‚ùå og:title${NC} - Missing (required for social sharing)"
fi

if [ -n "$OG_TYPE" ]; then
    echo -e "${GREEN}‚úÖ og:type${NC} - ${BOLD}\"$OG_TYPE\"${NC}"
else
    echo -e "${RED}‚ùå og:type${NC} - Missing (required for social sharing)"
fi

if [ -n "$OG_IMAGE" ]; then
    echo -e "${GREEN}‚úÖ og:image${NC} - ${BOLD}\"$OG_IMAGE\"${NC}"
    # Check image dimensions if available
    if [ -n "$OG_IMAGE_WIDTH" ] && [ -n "$OG_IMAGE_HEIGHT" ]; then
        echo -e "   ${CYAN}Dimensions: ${OG_IMAGE_WIDTH}x${OG_IMAGE_HEIGHT}px${NC}"
        if [ "$OG_IMAGE_WIDTH" -ge 1200 ] && [ "$OG_IMAGE_HEIGHT" -ge 630 ]; then
            echo -e "   ${GREEN}‚úÖ Optimal size for social sharing${NC}"
        else
            echo -e "   ${ORANGE}‚ö†Ô∏è  Recommended: 1200x630px for best results${NC}"
        fi
    fi
else
    echo -e "${RED}‚ùå og:image${NC} - Missing (required for social sharing)"
fi

if [ -n "$OG_URL" ]; then
    echo -e "${GREEN}‚úÖ og:url${NC} - ${BOLD}\"$OG_URL\"${NC}"
else
    echo -e "${RED}‚ùå og:url${NC} - Missing (required for social sharing)"
fi

echo ""

# Optional Properties Analysis
echo -e "${BOLD}‚≠ê Optional Open Graph Properties${NC}"
echo -e "${CYAN}==================================${NC}"

if [ -n "$OG_DESCRIPTION" ]; then
    echo -e "${GREEN}‚úÖ og:description${NC} - ${BOLD}\"${OG_DESCRIPTION:0:80}...\"${NC}"
else
    echo -e "${ORANGE}‚ö†Ô∏è  og:description${NC} - Missing (recommended for better engagement)"
fi

if [ -n "$OG_SITE_NAME" ]; then
    echo -e "${GREEN}‚úÖ og:site_name${NC} - ${BOLD}\"$OG_SITE_NAME\"${NC}"
else
    echo -e "${ORANGE}‚ö†Ô∏è  og:site_name${NC} - Missing (helps identify your brand)"
fi

if [ -n "$OG_LOCALE" ]; then
    echo -e "${GREEN}‚úÖ og:locale${NC} - ${BOLD}\"$OG_LOCALE\"${NC}"
else
    echo -e "${ORANGE}‚ö†Ô∏è  og:locale${NC} - Missing (defaults to 'en_US')"
fi

if [ -n "$OG_IMAGE_ALT" ]; then
    echo -e "${GREEN}‚úÖ og:image:alt${NC} - ${BOLD}\"$OG_IMAGE_ALT\"${NC}"
else
    echo -e "${ORANGE}‚ö†Ô∏è  og:image:alt${NC} - Missing (improves accessibility)"
fi

# Show article-specific properties if type is article
if [ "$OG_TYPE" = "article" ]; then
    echo ""
    echo -e "${BOLD}üì∞ Article-Specific Properties${NC}"
    echo -e "${CYAN}==============================${NC}"

    if [ -n "$OG_ARTICLE_AUTHOR" ]; then
        echo -e "${GREEN}‚úÖ og:article:author${NC} - ${BOLD}\"$OG_ARTICLE_AUTHOR\"${NC}"
    else
        echo -e "${ORANGE}‚ö†Ô∏è  og:article:author${NC} - Missing (recommended for articles)"
    fi

    if [ -n "$OG_ARTICLE_PUBLISHED" ]; then
        echo -e "${GREEN}‚úÖ og:article:published_time${NC} - ${BOLD}\"$OG_ARTICLE_PUBLISHED\"${NC}"
    else
        echo -e "${ORANGE}‚ö†Ô∏è  og:article:published_time${NC} - Missing (recommended for articles)"
    fi
fi

echo ""

# Twitter Card Analysis
echo -e "${BOLD}üê¶ Twitter Card Metadata${NC}"
echo -e "${CYAN}=========================${NC}"

if [ "$TWITTER_TAG_COUNT" -gt 0 ]; then
    echo -e "${GREEN}‚úÖ Twitter Card markup found: $TWITTER_TAG_COUNT tags${NC}"

    if [ -n "$TWITTER_CARD" ]; then
        echo -e "${GREEN}‚úÖ twitter:card${NC} - ${BOLD}\"$TWITTER_CARD\"${NC}"
    else
        echo -e "${RED}‚ùå twitter:card${NC} - Missing (required for Twitter sharing)"
    fi

    if [ -n "$TWITTER_SITE" ]; then
        echo -e "${GREEN}‚úÖ twitter:site${NC} - ${BOLD}\"$TWITTER_SITE\"${NC}"
    else
        echo -e "${ORANGE}‚ö†Ô∏è  twitter:site${NC} - Missing (recommended for attribution)"
    fi

    if [ -n "$TWITTER_CREATOR" ]; then
        echo -e "${GREEN}‚úÖ twitter:creator${NC} - ${BOLD}\"$TWITTER_CREATOR\"${NC}"
    fi

    # Check for Twitter-specific title/description or fallback to OG
    if [ -n "$TWITTER_TITLE" ]; then
        echo -e "${GREEN}‚úÖ twitter:title${NC} - ${BOLD}\"$TWITTER_TITLE\"${NC}"
    elif [ -n "$OG_TITLE" ]; then
        echo -e "${CYAN}‚ÑπÔ∏è  Using og:title for Twitter${NC}"
    fi

    if [ -n "$TWITTER_DESCRIPTION" ]; then
        echo -e "${GREEN}‚úÖ twitter:description${NC} - ${BOLD}\"${TWITTER_DESCRIPTION:0:80}...\"${NC}"
    elif [ -n "$OG_DESCRIPTION" ]; then
        echo -e "${CYAN}‚ÑπÔ∏è  Using og:description for Twitter${NC}"
    fi

    if [ -n "$TWITTER_IMAGE" ]; then
        echo -e "${GREEN}‚úÖ twitter:image${NC} - ${BOLD}\"$TWITTER_IMAGE\"${NC}"
    elif [ -n "$OG_IMAGE" ]; then
        echo -e "${CYAN}‚ÑπÔ∏è  Using og:image for Twitter${NC}"
    fi
else
    echo -e "${ORANGE}‚ö†Ô∏è  No Twitter Card markup found${NC}"
    echo -e "${CYAN}   Twitter will fall back to Open Graph tags${NC}"
fi

echo ""

# Recommendations
echo -e "${BOLD}${PURPLE}üí° Recommendations${NC}"
echo -e "${CYAN}==================${NC}"

if [ "$OG_TAG_COUNT" -eq 0 ]; then
    echo -e "${RED}‚Ä¢ Add basic Open Graph tags for social media sharing${NC}"
    echo -e "${CYAN}‚Ä¢ Start with og:title, og:type, og:image, og:url${NC}"
elif [ "$REQUIRED_OG_COUNT" -lt 4 ]; then
    echo -e "${ORANGE}‚Ä¢ Complete the required Open Graph properties${NC}"
    [ -z "$OG_TITLE" ] && echo -e "${CYAN}‚Ä¢ Add og:title tag${NC}"
    [ -z "$OG_TYPE" ] && echo -e "${CYAN}‚Ä¢ Add og:type tag (website, article, etc.)${NC}"
    [ -z "$OG_IMAGE" ] && echo -e "${CYAN}‚Ä¢ Add og:image tag${NC}"
    [ -z "$OG_URL" ] && echo -e "${CYAN}‚Ä¢ Add og:url tag${NC}"
fi

if [ -z "$OG_DESCRIPTION" ]; then
    echo -e "${ORANGE}‚Ä¢ Add og:description for better engagement${NC}"
fi

if [ -z "$OG_SITE_NAME" ]; then
    echo -e "${ORANGE}‚Ä¢ Add og:site_name for brand recognition${NC}"
fi

if [ -n "$OG_IMAGE" ] && [ -z "$OG_IMAGE_ALT" ]; then
    echo -e "${ORANGE}‚Ä¢ Add og:image:alt for accessibility${NC}"
fi

if [ "$TWITTER_TAG_COUNT" -eq 0 ]; then
    echo -e "${ORANGE}‚Ä¢ Consider adding Twitter Card tags for better Twitter sharing${NC}"
fi

if [ "$TOTAL_SCORE" -gt 0 ]; then
    echo -e "${GREEN}‚Ä¢ Test your Open Graph markup with validation tools:${NC}"
    echo -e "${CYAN}‚Ä¢ Facebook Sharing Debugger: https://developers.facebook.com/tools/debug/${NC}"
    echo -e "${CYAN}‚Ä¢ Twitter Card Validator: https://cards-dev.twitter.com/validator${NC}"
    echo -e "${CYAN}‚Ä¢ LinkedIn Post Inspector: https://www.linkedin.com/post-inspector/${NC}"
fi

echo ""

# Cleanup
rm -f "$HTML_FILE"

echo -e "${BOLD}${GREEN}‚úÖ Open Graph analysis complete!${NC}"